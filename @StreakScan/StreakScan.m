classdef (Abstract) StreakScan < ProcessedImg & ICalcVelocityStreaks
%StreakScan - Superclass for streak scan processable images
%
%   The StreakScan class is an abstract superclass that implements (or
%   requires implementation in its subclasses via abstract methods or
%   properties) most functionality related to images containing streaks
%   generated by moving red blood cells (RBCs).
%
%   StreakScan is a subclass of matlab.mixin.Copyable, which is itself a
%   subclass of handle, meaning that StreakScan objects are actually
%   references to the data contained in the object.  This ensures memory is
%   used efficiently when StreakScan objects are contained in other objects
%   (e.g. ImgGroup objects). However, StreakScan objects can use the copy
%   method of matlab.mixin.Copyable to create new, independent objects.
%
% StreakScan public properties:
%   calcVelocity    - A scalar CalcVelocityStreaks object
%   colsToUseVel    - The columns from the raw image to use for velocity
%   isDarkStreaks   - Flag for whether the streaks are dark or bright
%   name            - The object name
%   plotList        - The list of plot options for each Calc
%   rawImg          - A scalar RawImgHelper object
%   state           - The object state
% 
% StreakScan public methods:
%   StreakScan      - StreakScan abstract class constructor
%   copy            - Copy MATLAB array of handle objects
%   get_config      - Return the Config from this StreakScan object
%   opt_config      - Optimise the parameters in Config objects using a GUI
%   output_data     - Output the data
%   plot            - Plot a figure
%   process         - Process the elements of the StreakScan object
%   split_into_windows - Split the raw image data into windows
%
% StreakScan static methods:
%   reqChannelAll   - The rawImg requires all of these channels
%   reqChannelAny   - The rawImg requires at least one of these channels
%
% StreakScan public events:
%   NewRawImg       - Notifies listeners that the rawImg property was set
%
%   See also StreakScan/StreakScan, LineScanVel, FrameScan, ProcessedImg,
%   matlab.mixin.Copyable, ICalcVelocityStreaks, IRawImg, RawImgHelper,
%   CalcVelocityStreaks

%   Copyright (C) 2017  Matthew J.P. Barrett, Kim David Ferrari et al.
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%   
%   You should have received a copy of the GNU General Public License 
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    % ================================================================== %
    
    properties
        
        %calcVelocity - A scalar CalcVelocityStreaks object
        %
        %   The calcVelocity must be a scalar object which is a subclass of
        %   CalcVelocityStreaks.
        %
        %   See also CalcVelocityRadon, CalcVelocityLSPIV,
        %   CalcVelocityStreaks
        calcVelocity
        
        %colsToUseVel - The columns from the raw image to use for velocity
        %
        %   The colsToUseVel must be numeric vector of length two where
        %   the elements correspond to the first and last columns of the
        %   raw image to use in the velocity calculation.  This can be
        %   useful to avoid noisy or unnecesary regions of the rawImg.
        colsToUseVel
        
        %isDarkStreaks - Flag for whether the streaks are dark or bright
        %
        %   The isDarkStreaks property represents whether the RBC streaks
        %   are positively labelled (e.g. by fluorescently labelled RBCs)
        %   or negatively labelled (e.g. by fluorescently labelled plasma).
        %   isDarkStreaks must be a scalar value convertible to a logical.
        %   [default = true]
        isDarkStreaks = true;
        
    end
    
    % ------------------------------------------------------------------ %
    
    properties (Dependent, Access=protected)
        
        %channelStreak - The image channel containing the RBC streaks
        channelStreak
        
    end
    
    % ================================================================== %
    
    methods
        
        function StreakScanObj = StreakScan(varargin)
        %StreakScan - StreakScan abstract class constructor
        %
        %   OBJ = StreakScan() prompts for all required information and
        %   creates a StreakScan object.
        %
        %   OBJ = StreakScan(NAME, RAWIMG, CONFIG, ISDS, COLS) creates a
        %   StreakScan object based on the specified NAME, RAWIMG, CONFIG,
        %   ISDS, and COLS.
        %
        %   Any of the arguments can be replaced by [] to prompt for the
        %   required information.
        %
        %   NAME must be a single row character array, and if it is empty
        %   the constructor will prompt to choose a name.
        %   RAWIMG must be a RawImgHelper object and can be of any
        %   dimension, but the resulting StreakScan object will be size
        %   [1 numel(RAWIMG)]. If RAWIMG is empty, the constructor will
        %   prompt to select/create a new one.
        %   CONFIG must be a scalar object derived from the Config class,
        %   and its create_calc() method must return an object derived from
        %   the CalcVelocityStreaks class.
        %   ISDS must be a scalar value that is convertible to a logical
        %   representing whether or not the streaks are dark (i.e.
        %   negatively labelled: ISDS = true) or bright (i.e. negatively
        %   labelled: ISDS = false). [default = true]
        %   COLS must be a vector of length two containing integer values
        %   representing the first and last columns of RAWIMG to be used.
        %
        %   If RAWIMG is not scalar, the values for the other arguments are
        %   assumed to apply to all elements of RAWIMG.  This is true
        %   whether the arguments are specified explicitly, or implicitly
        %   (i.e. via interactive prompt).  To choose or specify individual
        %   values for the other arguments, either create the StreakScan
        %   objects individually and combine into an array, or use the
        %   ImgGroup class.
        %
        %   See also RawImg, RawImgHelper, IRawImg, ProcessedImg,
        %   matlab.mixin.Copyable, handle, CalcVelocityStreaks,
        %   CalcVelocityRadon, CalcVelocityLSPIV, ConfigVelocityRadon,
        %   ConfigVelocityLSPIV, ImgGroup
            
            % Parse arguments
            [name, rawImg, configVelIn, isDSIn, colsVelIn] = ...
                utils.parse_opt_args({'', [], [], [], []}, varargin);
            
            % Call RawImg (i.e. parent class) constructor
            StreakScanObj = StreakScanObj@ProcessedImg(name, rawImg);
            
            % Work out the current recursion depth
            if utils.is_deeper_than('StreakScan.StreakScan')
                return;
            end

            % Choose dark streaks
            if isempty(isDSIn)
                StreakScanObj.choose_streaks();
            else
                [StreakScanObj(:).isDarkStreaks] = deal(isDSIn);
            end
            
            % Choose which velocity calculation method
            if isempty(configVelIn)
                calcObj = StreakScan.choose_calcVelocity();
            else
                calcObj = configVelIn.create_calc();
            end
            for iElem = 1:numel(StreakScanObj)
                StreakScanObj(iElem).calcVelocity = copy(calcObj);
            end

            % Choose which columns to use for velocity
            StreakScanObj.set_cols_vel(colsVelIn);
            
        end
        
        % -------------------------------------------------------------- %
        
        varargout = plot(self, varargin)
        
        % -------------------------------------------------------------- %
        
        function channelStreak = get.channelStreak(self)
            
            % Define this variable for convenience
            channels = self.rawImg.metadata.channels;
            
            % Check that the appropriate channels are specified
            if self.isDarkStreaks
                if self.rawImg.has_ch('blood_plasma')
                    channelStreak = channels.blood_plasma;
                else
                    error('StreakScan:GetStreakChannel:NoPlasma', ['You ' ...
                        'have chosen to analyse dark streaks, but ' ...
                        'there is no plasma channel defined.'])
                end
            else
                if self.rawImg.has_ch('blood_rbcs')
                    channelStreak = channels.blood_rbcs;
                else
                    error('StreakScan:GetStreakChannel:NoRBCs', ['You ' ...
                        'have chosen to analyse bright streaks, but ' ...
                        'there is no RBCs channel defined.'])
                end
            end
            
        end
        
        % -------------------------------------------------------------- %
        
        function set.isDarkStreaks(self, isDarkStreaks)
            
            % Check isDarkStreaks is boolean
            utils.checks.logical_able(isDarkStreaks, 'isDarkStreaks');
            
            % Check isDarkStreaks is scalar
            utils.checks.scalar(isDarkStreaks, 'isDarkStreaks');
            
            % Set the property
            self.isDarkStreaks = logical(isDarkStreaks);
            
        end
        
        % -------------------------------------------------------------- %
        
        function set.colsToUseVel(self, colsToUseVelIn)
            
            % Call the seperate function to run the checks
            imgDim = 2;
            varName = 'colsToUseVel';
            imgSize = [];
            if ~isempty(self.rawImg)
                imgSize = size(self.rawImg.rawdata);
            end
            self.colsToUseVel = utils.checks.check_crop_vals(imgSize, ...
                colsToUseVelIn, imgDim, varName);
            
        end
        
        % -------------------------------------------------------------- %
        
        function set.calcVelocity(self, calcVelocity)
            
            % Check it's the right class
            className = 'CalcVelocityStreaks';
            varName = 'calcVelocity';
            utils.checks.object_class(calcVelocity, className, varName);
            
            % Check calcVelocity is scalar
            utils.checks.scalar(calcVelocity, varName)
            
            % Set the property
            self.calcVelocity = calcVelocity;
            
        end
        
    end
    
    % ================================================================== %
    
    methods (Access = protected)
        
        function choose_cols_vel(self)
            
            % Call the function one by one if we have an array
            if ~isscalar(self)
                arrayfun(@choose_cols_vel, self);
                return
            end
            
            imgData = mean(...
                self.rawImg.rawdata(:, :, self.channelStreak, :), 4);
            
            % Check that the aspect ratio is ok
            [nRows, nCols] = size(imgData);
            aspectRatio = nRows/nCols;
            arThresh = 10;
            if aspectRatio > arThresh
                warning('StreakScan:ChooseColsVel:AspectRatio', ...
                    'The image will be averaged for easier cropping.')
                nOverlap = 1;
                windowLines = ceil(nRows/(nCols*arThresh));
                imgData = squeeze(mean(utils.split_into_windows(...
                    imgData, nOverlap, windowLines), 1))';
            end
            
            % Call the static function to choose the images
            self.colsToUseVel = utils.crop_rows_cols(imgData);
            
        end
        
        % -------------------------------------------------------------- %
        
        isDarkStreaks = choose_streaks(self)
        
        % -------------------------------------------------------------- %
        
        varargout = plot_main(self, varargin)
        plot_frame(self, varargin)
        plot_streaks(self, varargin)
        
        % -------------------------------------------------------------- %
        
        function process_velocity(self)
            
            % Do the actual calculation
            self.calcVelocity = self.calcVelocity.process(self);
            
        end
        
        % -------------------------------------------------------------- %
        
        function set_cols_vel(self, colsVelIn)
            
            % Call the function one by one if we have an array
            if ~isscalar(self)
                for iObj = 1:numel(self)
                    
                    self(iObj).set_cols_vel(colsVelIn)
                    
                    if iObj == 1
                        colsVelIn = self(iObj).colsToUseVel;
                    end
                    
                end
                return
            end
            
            if self.isComposite
                self.update_rawImg_props()
            else 
                
                % Choose the columns to use
                if isempty(colsVelIn)
                    self.choose_cols_vel();
                else
                    self.colsToUseVel = colsVelIn;
                end
                
            end
            
        end
        
        % -------------------------------------------------------------- %
        
        function update_rawImg_props(self)
            
            % Call the superclass method to do it's bit
            self.update_rawImg_props@ProcessedImg()
            
            % Call the function one by one if we have an array
            if ~isscalar(self)
                arrayfun(@update_rawImg_props, self);
                return
            end
            
            % Update colsToUseVel
            if self.isComposite
                wngState = warning('off', ...
                    'CheckCropVals:TooBigColsToUseVel');
                self.colsToUseVel = [1 inf];
                warning(wngState)
                [~, lastID] = lastwarn();
                if strcmp(lastID, 'CheckCropVals:TooBigColsToUseVel')
                    lastwarn('')
                end
            else
                self.choose_cols_vel();
            end
            
        end
        
    end
    
    % ================================================================== %
    
    methods (Static)
        
        function chList = reqChannelAll()
        %reqChannelAll - The rawImg requires all of these channels
            chList = {};
        end
        
        % -------------------------------------------------------------- %
        
        function chList = reqChannelAny()
        %reqChannelAny - The rawImg requires at least one of these channels
            chList = {'blood_plasma', 'blood_rbcs'};
        end
        
    end
    
    % ================================================================== %
    
    methods (Static, Access = protected)
        
        function calcVelocity = choose_calcVelocity()
        %choose_calcVelocity - Choose a calcVelocity
            
            classParent = 'CalcVelocityStreaks';
            strType = 'velocity calculation';
            calcVelocity = utils.choose_subclass(...
                classParent, strType);
            
        end
        
    end
    
    % ================================================================== %
    
end
