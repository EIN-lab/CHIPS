classdef CalcFindROIsFLIKA_2D < CalcFindROIsFLIKA
%CalcFindROIsFLIKA_2D - Class for FLIKA-based ROI identification (2D)
%
%   The CalcFindROIsFLIKA_2D class is a Calc class that implements the 2D
%   FLIKA algorithm for ROI identification. In the 2D case, the original 3D
%   mask generated by FLIKA is collapsed to 2D using a simple thresholding
%   approach, then individual ROIs are identified. For further information
%   about FLIKA, please refer to <a href="matlab:web('http://dx.doi.org/10.1016/j.ceca.2014.06.003', '-browser')">Ellefsen et al. (2014)</a>, Cell Calcium
%   56(3):147-156.
%
%   CalcFindROIsFLIKA_2D is a subclass of matlab.mixin.Copyable, which is
%   itself a subclass of handle, meaning that CalcFindROIsFLIKA_2D objects
%   are actually references to the data contained in the object.  This
%   allows certain features that are only possible with handle objects,
%   such as events and certain GUI operations.  However, it is important to
%   use the copy method of matlab.mixin.Copyable to create a new,
%   independent object; otherwise changes to a CalcFindROIsFLIKA_2D object
%   used in one place will also lead to changes in another (perhaps
%   undesired) place.
%
% CalcFindROIsFLIKA_2D public properties
%   config          - A scalar ConfigFindROIsFLIKA_2D object
%   data            - A scalar DataFindROIsFLIKA_2D object
%
% CalcFindROIsFLIKA_2D public methods
%   CalcFindROIsFLIKA_2D - CalcFindROIsFLIKA_2D class constructor
%   copy            - Copy MATLAB array of handle objects
%   get_roiMask     - Extract ROI mask
%   measure_ROIs    - Measure the ROI masks and return the traces
%   plot            - Plot a figure
%   process         - Run the processing
%
%   See also CalcFindROIsFLIKA_2p5D, CalcFindROIsFLIKA_3D,
%   CalcFindROIsFLIKA, CalcFindROIs, Calc, ConfigFindROIsFLIKA_2D,
%   DataFindROIsFLIKA_2D, CellScan

%   Copyright (C) 2017  Matthew J.P. Barrett, Kim David Ferrari et al.
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%   
%   You should have received a copy of the GNU General Public License 
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.

    % ================================================================== %
    
    properties (Access = protected)
        %is3D - Whether or not the ROI mask is 3D
        is3D = false;
        
        %isLS - Whether or not the RawImg is a linescan
        isLS = false;        
    end
    
    % ------------------------------------------------------------------ %
    
    properties (Constant, Access = protected)
        
        fracDetect = 1;
        
        %validConfig - Constant, protected property containing the name of
        %   the associated Config class
        validConfig = {'ConfigFindROIsFLIKA_2D'};
        
        %validData - Constant, protected property containing the name of
        %   the associated Data class
        validData = {'DataFindROIsFLIKA_2D'};
        
    end
    
    % ================================================================== %
    
    methods
        
        function CalcFLIKA_2DObj = CalcFindROIsFLIKA_2D(varargin)
        %CalcFindROIsFLIKA_2D - CalcFindROIsFLIKA_2D class constructor
        %
        %   OBJ = CalcFindROIsFLIKA_2D() prompts for all required
        %   information and creates a CalcFindROIsFLIKA_2D object.
        %
        %   OBJ = CalcFindROIsFLIKA_2D(CONFIG, DATA) uses the specified
        %   CONFIG and DATA objects to construct the CalcFindROIsFLIKA_2D
        %   object. If any of the input arguments are empty, the
        %   constructor will prompt for any required information. The input
        %   arguments must be scalar ConfigFindROIsFLIKA_2D and/or
        %   DataFindROIsFLIKA_2D objects.
        %
        %   See also ConfigFindROIsFLIKA_2D, DataFindROIsFLIKA_2D
        
            % Parse arguments
            [configIn, dataIn] = utils.parse_opt_args({[], []}, varargin);
            
            % Call CalcFindROIs (i.e. parent class) constructor
            CalcFLIKA_2DObj = ...
                CalcFLIKA_2DObj@CalcFindROIsFLIKA(configIn, dataIn);
            
        end
        
    end
    
    % ================================================================== %
    
    methods (Access = protected)
        
        function [puffSignificantMask, roiMask, stats] = ...
                create_roiMask(self, dims, pixelIdxs, pixelSize, ~)
            
            % Create stage 3 mask
            puffSignificantMask = false(dims);
            puffSignificantMask(vertcat(pixelIdxs{:})) = true;
            
            % Normalise, but be careful of the special case when there's
            % no single pixel found
            tempMap = sum(puffSignificantMask, 3);
            mapRaw = double(tempMap);
            if sum(mapRaw(:)) < 1
                mapNorm = mapRaw;
            else
                mapNorm = (mapRaw - min(mapRaw(:)))./ ...
                    (max(mapRaw(:)) - min(mapRaw(:)));
            end

            % Threshold
            mapDone = mapNorm > self.config.threshold2D;

            % Discard ROIs touching the border, if necessary
            if self.config.discardBorderROIs        
                mapDone = imclearborder(mapDone);
            end
            
            % Get some statistics about the ROIs
            stats = CalcFindROIs.get_ROI_stats(mapDone, pixelSize);
            
            % Create the roiMask
            cc = bwconncomp(mapDone);
            roiMask = labelmatrix(cc);
            
            % Filter out rois that are too small
            maskSize = ([stats.Area] < self.config.minROIArea) | ...
                ([stats.Area] > self.config.maxROIArea);
            if sum(maskSize) > 0
                cc.PixelIdxList(maskSize) = [];
                cc.NumObjects = cc.NumObjects - sum(maskSize);
                roiMask = labelmatrix(cc);
                stats(maskSize) = [];
            end
            
            % Create the stats matrix and find ROI properties
            hasNoROIs = cc.NumObjects < 1;
            if hasNoROIs
                stats(1).Area = NaN;
                stats(1).Centroid = [NaN, NaN];
                stats(1).PixelIdxList = {NaN};
            end

        end
        
        % -------------------------------------------------------------- %
        
        function self = add_data(self, puffSignificantMask, roiMask, ...
                stats, roiNames)
            
            % Store processed data
            centroids = reshape([stats(:).Centroid], 2, [])';
            self.data = self.data.add_processed_data([stats.Area]', ...
                centroids(:,1), centroids(:,2), puffSignificantMask, ...
                {stats(:).PixelIdxList}', roiMask, roiNames);
            
        end

    end
    
    % ================================================================== %
    
    methods (Static, Access = protected)
        
        function configObj = create_config()
        %create_config - Creates an object of the associated Config class
        
            configObj = ConfigFindROIsFLIKA_2D();
        
        end
        
        % -------------------------------------------------------------- %
        
        function dataObj = create_data()
        %create_data - Creates an object of the associated Data class
            
            dataObj = DataFindROIsFLIKA_2D();
        
        end
        
    end
    
    % ================================================================== %
    
end
