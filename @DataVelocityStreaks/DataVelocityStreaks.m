classdef (Abstract) DataVelocityStreaks < DataVelocity
%DataVelocityStreaks - Abstract superclass for DataVelocityStreaks classes
%
%   The DataVelocityStreaks class is an abstract superclass that implements
%   (or requires implementation in its subclasses via abstract methods or
%   properties) all basic functionality related to storing data from
%   velocity calculations based on analysis of RBC streaks. Typically there
%   is one concrete subclass of DataVelocityStreaks for every concrete
%   subclass of CalcVelocityStreaks, and the DataVelocityStreaks object
%   stores the algorithm-specific output data that is generated by the
%   corresponding CalcVelocityStreaks class.
%
% DataVelocityStreaks public properties inherited from Data:
%   mask            - A mask combining all of the other masks
%   means           - A helper structure containing means of the data
%   nPlotsGood      - The number of plots in non-debug mode        
%   nPlotsDebug     - The number of plots in debug mode
%   state           - The current state
%   stdevs          - A helper structure containing stdevs of the data
%
% DataVelocityStreaks public properties
%   estSNR          - An estimate of the SNR of the velocity calculation
%   maskSNR         - Points below the SNR threshold
%   maskSTD         - Points outside the std range
%   time            - The time series vector [s]
%   velocity        - A time series vector of the RBC velocity [mm/s]
%   yPosition       - The y position at which the velocity was calculated
%
% DataVelocityStreaks public methods:
%   add_raw_data    - Add raw data to the Data object
%   add_processed_data - Add processed data to the Data object
%   add_mask_data   - Add mask data to the Data object
%   plot            - Plot a single graph from the data object
%   plot_graphs     - Plot multiple graphs from the data object
%   output_data     - Output the data
%
%   See also DataVelocityRadon, DataVelocityLSPIV, DataVelocity, Data,
%   CalcVelocityStreaks, LineScanVel, FrameScan

%   Copyright (C) 2017  Matthew J.P. Barrett, Kim David Ferrari et al.
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%   
%   You should have received a copy of the GNU General Public License 
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    % ================================================================== %
    
    properties
        
        %estSNR - An estimate of the SNR of the velocity calculation
        %
        %   See also DataVelocity.velocity, DataVelocity.maskSNR
        estSNR
        
        %maskSNR - Points below the SNR threshold
        %
        %   See also DataVelocity.velocity, DataVelocity.estSNR
        maskSNR
                
        %yPosition - The y position at which velocity is calculated [um]
        %
        %   See also DataVelocity.velocity
        yPosition
        
    end
    
    % ================================================================== %
    
    methods
        
        function self = set.yPosition(self, val)
            utils.checks.real_num(val, 'yPosition')
            utils.checks.vector(val, 'yPosition')
            self.yPosition = val;
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.estSNR(self, val)
            utils.checks.rfv(val, 'estSNR')
            utils.checks.greater_than(val, 0, true, 'estSNR')
            self.estSNR = val;
        end
        
        % -------------------------------------------------------------- %
        
        function self = set.maskSNR(self, val)
            utils.checks.lv(val, 'maskSNR')
            self.maskSNR = val;
        end
        
    end
    
    % ================================================================== %
    
end
